In this first programming assignment we consider a three-dimensional maze problem.  Go into this directory. You can find the following files in the directory:
*.maze: These files are simple textfiles with information about the maze :
– Coordinates (x, y, z) denote cells in the maze, with X, Y and Z in the directions. The top left cell on floor 0 has coordinate (0,0,0).
– The current position is indicated by the capital letter X. The letter G in cell (1,1,0) in
default.maze denotes the goal cell.
– If you run the code, the maze will also be printed with the coordinates at the bottom of
each cell.
– Connections between rooms are indicated by spaces. Thus, it is possible to go from (0,3,1)
to (1,3,1), but it is not possible to go from (0,2,1) to (1,2,1).
– If a room has a staircase going up, then this is indicated by the letter U (Up). The letter
D (Down) denotes a staircase going down.
– All connections between rooms are symmetric: if (x, y, z) has a staircase going up, then (x,
y, z +1) has a staircase going down.
– So, in the maze it is possible to go up from (1,3,0) to (1,3,1), and vice versa.
– Note that oblique moves (moves along a diagonal) are not allowed. The cost for going up
is 3, for going down is 2 and sideways is 1.
maze.py: This file defines the Room and Maze class. It shouldn’t be necessary to change
these files. Look over the available methods for the Room class, as they may be useful -
Room.get_connections() in particular. Use that function to provide you with the order in
which to visit neighboring states.
state.py: State is a class to keep track of the current path and cost. Feel free to add things if
needed.
maze_solver.py: File where the functions for the search algorithms are. The open list version
of DFS and BFS is already implemented.
main.py: File to read arguments from command line or start solver with default options
fringe.py: Fringe is a wrapper around the queue library of python in order to track some
statistic. This can be used to see how many states were added to the queue and how maney
states where visited.
You can run it with: python3 main.py [BFS|DFS] [mazefile]. When the program finds a solution
it will print the fringe statistics and the path. It will also print the maze, the path displayed in it and
the cost in the upper left corner of a cell.
Questions:
a) Try to run default.maze with the depth first search algorithm (python3 main.py DFS). Will
it find a solution? If not, why not?
b) Try to run BFS.maze with the breadth first search algorithm. Will it find a solution? If not,
why not?
c) Fix (if needed) the BFS and DFS algorithms so that they will find a solution in the mentioned
cases.
d) Implement the uniform cost search algorithm (make sure that you can call it with: python3
main.py UCS greedy_astar.maze).
e) Run two_paths.maze with the BFS and uniform cost search algorithm. Why are the paths that
the algorithms have found different?
f) Implement the greedy search algorithm (make sure that you can call it with: python3 main.py
GREEDY greedy_astar.maze).
g) Implement the A* search algorithm (make sure that you can call it with: python3 main.py
ASTAR greedy_astar.maze).
h) Why are the paths that the A* and the greedy search algorithm have found different?
i) Implement the iterative deepening search algorithm (make sure that you can call it with:
python3 main.py IDS). Note: recursion can be useful here, but is not needed. If you decide to use recursion, make sure that you print the path and cost.

fringe.py content:
#!/usr/bin/env python3
import queue
import sys


class Fringe(object):
    """wrapper for queue lib from python to keep track of some statistics"""

    # ### DO NOT CHANGE __MAX_FRINGE_SIZE ###
    __MAX_FRINGE_SIZE = 50000
    __fringe = None
    __insertions = 0
    __deletions = 0
    __maxSize = 0

    def create_fringe(self, fringe_type):
        """
        Creates a fringe of type fringe_type
        :param fringe_type: The desired type for the queue
        :return: A queue of type fringe_type
        """
        if fringe_type is "STACK":
            return queue.LifoQueue(self.__MAX_FRINGE_SIZE)

        if fringe_type is "FIFO":
            return queue.Queue(self.__MAX_FRINGE_SIZE)

        if fringe_type is "PRIORITY":
            return queue.PriorityQueue(self.__MAX_FRINGE_SIZE)

    def __init__(self, fringe_type='FIFO'):
        self.__type = fringe_type
        super(Fringe, self).__init__()
        self.__fringe = self.create_fringe(self.__type)

    def push(self, item):
        """
        puts the item in the fringe
        :param item: item to put in the fringe
        """
        # If the fringe is full, print an error and exit
        if self.__fringe.full():
            print("Error: trying to apply push on an fringe that already contains MAX ("
                  + str(self.__MAX_FRINGE_SIZE) + ") elements")
            self.print_stats()
            sys.exit(1)
        self.__fringe.put(item, block=False)
        if self.__fringe.qsize() > self.__maxSize:
            self.__maxSize = self.__fringe.qsize()
        self.__insertions += 1

    def pop(self):
        """
        :return: item from fringe, None if the fringe is empty
        """
        if self.__fringe.empty():
            return None
        self.__deletions += 1
        return self.__fringe.get()

    def is_empty(self):
        """
        :return: True if fringe is empty, false otherwise
        """
        return self.__fringe.empty()

    # returns the number of insertions
    def get_insertions(self):
        """
        :return: The number of insertions in the fringe
        """
        return self.__insertions

    def get_deletions(self):
        """
        :return: number of items deleted from fringe
        """
        return self.__deletions

    def print_stats(self):
        """ Prints the statistics of the fringe """
        print("#### fringe statistics:")
        print("size: {0:>15d}".format(self.__fringe.qsize()))
        print("maximum size: {0:>7d}".format(self.__maxSize))
        print("insertions: {0:>9d}".format(self.get_insertions()))
        print("deletions: {0:>10d}".format(self.get_deletions()))



main.py:
#!/usr/bin/env python3
import sys
from maze_solver import *
from maze import Maze

run_default_algorithm = False

try:  # look if algorithm is given as argument, otherwise use default
    algorithm = sys.argv[1].upper()
    accepted_algorithms = ["DFS", "IDS", "BFS", "UCS", "ASTAR", "GREEDY"]
    if algorithm not in accepted_algorithms:  # check if algorithm is valid one
        print("Error: search algorithm (" + algorithm + ") not in the list of possible algorithms")
        print("Usage: python3 ALGORITHM [maze_file.maze]")
        accepted_algorithms.sort()
        print("Possible algorithms: " + str(accepted_algorithms))
        exit(-1)
except IndexError:
    run_default_algorithm = True
    algorithm = "BFS"

if len(sys.argv) > 2: # if maze file is given as argument, use that. Otherwise use default.maze
    maze = Maze(sys.argv[2])
else:
    maze = Maze()

maze.print_maze(True)
solve_maze_general(maze, algorithm)

if run_default_algorithm:
    print("No algorithm given as argument, used default (BFS)")

maze_solver:
#!/usr/bin/env python3
from fringe import Fringe
from state import State


def solve_maze_general(maze, algorithm):
    """
    Finds a path in a given maze with the given algorithm
    :param maze: The maze to solve
    :param algorithm: The desired algorithm to use
    :return: True if solution is found, False otherwise
    """
    # select the right fringe for each algorithm
    if algorithm == "BFS":
        fr = Fringe("FIFO")
    elif algorithm == "DFS":
        fr = Fringe("STACK")
    else:
        print("Algorithm not found/implemented, exit")
        return

    # get the start room, create state with start room and None as parent and put it in fringe
    room = maze.get_room(*maze.get_start())
    state = State(room, None)
    fr.push(state)

    while not fr.is_empty():

        # get item from fringe and get the room from that state
        state = fr.pop()
        room = state.get_room()

        if room.is_goal():
            # if room is the goal, print that with the statistics and the path and return
            print("solved")
            fr.print_stats()
            state.print_path()
            state.print_actions()
            print()  # print newline
            maze.print_maze_with_path(state)
            return True

        for d in room.get_connections():
            # loop through every possible move
            new_room, cost = room.make_move(d, state.get_cost())    # Get new room after move and cost to get there
            new_state = State(new_room, state, cost)                # Create new state with new room and old room
            fr.push(new_state)                                      # push the new state

    print("not solved")     # fringe is empty and goal is not found, so maze is not solved
    fr.print_stats()        # print the statistics of the fringe
    return False

maze.py:

#!/usr/bin/env python3
import sys
from room import Room


class Maze:
    """Class to save all the characteristics of a maze"""

    def __init__(self, file_name="default.maze"):
        self.width = None
        self.height = None
        self.floors = None
        self.rooms = None
        self.goal = None
        self.start = None
        self.read_maze(file_name)

    def get_goal(self):
        """
        :return: The coordinates (x, y, z) of the goal room
        """
        return self.goal

    def get_start(self):
        """
        :return: The coordinates (x, y, z) of the start room
        """
        return self.start

    def get_room(self, x, y, z):
        """
        returns the room with coordinates (x, y, z)
        :param x: z coordinate of the desired room
        :param y: x coordinate of the desired room
        :param z: y coordinate of the desired room
        :return: The room with coordinates (x, y, z)
        """
        return self.rooms[x][y][z]

    # -------------------------------------------------------------------------------------	#
    # The part below is only for reading the maze files and printing the maze				#
    # it is not needed to look through it or to understand it 								#
    # ------------------------------------------------------------------------------------- #

    @staticmethod
    def get_move_dir(from_coords, to_coords):
        if from_coords[2] - to_coords[2] == -1:
            return "UP"
        if from_coords[2] - to_coords[2] == 1:
            return "DOWN"
        if from_coords[0] - to_coords[0] == -1:
            return "EAST"
        if from_coords[0] - to_coords[0] == 1:
            return "WEST"
        if from_coords[1] - to_coords[1] == 1:
            return "NORTH"
        if from_coords[1] - to_coords[1] == -1:
            return "SOUTH"
        return ""

    @staticmethod
    def get_dir(room, to_from, direction):
        coords = room.get_coords()
        if coords in direction and to_from in direction[coords]:
            return direction[room.get_coords()][to_from]
        return ""

    def read_maze(self, file_name):
        try:
            f = open(file_name, "r")
        except FileNotFoundError:
            print("File: " + file_name + " not found, exit")
            sys.exit(-1)
        self.width = int(f.readline().split("Width:")[1].strip())
        self.height = int(f.readline().split("Height:")[1].strip())
        self.floors = int(f.readline().split("Floors:")[1].strip())
        self.rooms = [[[None for _ in range(self.floors)]
                       for _ in range(self.height)] for _ in range(self.width)]

        for idx in range(self.floors):
            self.read_floor(f)

    @staticmethod
    def get_heuristic(row):
        string = (str(row[1]) + str(row[2])).strip()
        try:
            return int(string)
        except ValueError:
            return None

    @staticmethod
    def check_connection(room, cell, direction):
        check = " "
        cost = 1
        if direction == "UP":
            check = "U"
            cost += 2
        if direction == "DOWN":
            check = "D"
            cost += 1
        if cell == check or cell.isnumeric():
            room.connections.append(direction)
            if cell.isnumeric():
                room.costs[direction] = int(cell)
            else:
                room.costs[direction] = cost

    def read_floor(self, f):
        line = f.readline()
        # get rid of empty lines
        while "Floor #" not in line:
            line = f.readline()
        floor = int(line.split("Floor #")[1].strip())
        lines = [None] * 5
        # order:0 UP, 1 DOWN,2 NORTH,3 SOUTH,4 EAST,5 WEST

        # read first row
        lines[0] = f.readline()
        # loop through each row
        for idy in range(self.height):
            for i in range(1, 5):
                lines[i] = f.readline()
            for idx in range(self.width):
                # create room and add to array
                room = Room((idx, idy, floor), self)
                self.rooms[idx][idy][floor] = room
                start = idx * 8
                # get part of input for one room
                r = [row[start:start + 9] for row in lines]
                room.heuristicValue = self.get_heuristic(r[1])
                self.check_connection(room, r[2][2], "UP")
                self.check_connection(room, r[2][6], "DOWN")
                self.check_connection(room, r[0][4], "NORTH")
                self.check_connection(room, r[4][4], "SOUTH")
                self.check_connection(room, r[2][8], "EAST")
                self.check_connection(room, r[2][0], "WEST")
                if "G" in r[2]:
                    self.goal = (idx, idy, floor)
                    room.set_goal()
                if "X" in r[2]:
                    self.start = (idx, idy, floor)
                    room.set_start()
            # last line is first line for next row
            lines[0] = lines[4]

    def get_room_line_one(self, room, print_coords, direction):
        # value_when_true if condition else value_when_false
        c = " "
        if self.get_dir(room, 'from', direction) is "NORTH":
            c = "v"
        if self.get_dir(room, 'to', direction) is "NORTH":
            c = "^"

        return ("|--|%s|--" % c) if room.can_move_to("NORTH") else "|-------"

    def get_room_line_two(self, room, print_coords, direction):
        west = "-" if room.can_move_to("WEST") else "|"
        c = " "
        if self.get_dir(room, 'from', direction) is "NORTH":
            c = "v"
        if self.get_dir(room, 'to', direction) is "NORTH":
            c = "^"
        heuristic = "  "
        if room.get_heuristic_value() is not None:
            heuristic = '{:>2}'.format(room.get_heuristic_value())
        cost = "   "
        coords = room.get_coords()
        if coords in direction and 'cost' in direction[coords]:
            cost = '{:>3}'.format(direction[room.get_coords()]['cost'])
        return "%s%s %s%s" % (west, heuristic, c, cost)

    def get_middle_char(self, room, direction):
        if room.is_start():
            return "X"
        if room.is_goal():
            return "G"
        if self.get_dir(room, 'to', direction) is "UP":
            return "o"
        if self.get_dir(room, 'to', direction) is "DOWN":
            return "o"
        if self.get_dir(room, 'from', direction) is "UP":
            return "o"
        if self.get_dir(room, 'from', direction) is "DOWN":
            return "o"
        return " "

    def get_room_line_three(self, room, print_coords, direction):
        up = "U" if room.can_move_to("UP") else " "
        down = "D" if room.can_move_to("DOWN") else " "
        west = " " if room.can_move_to("WEST") else "|"
        from_to_west = " "
        from_to_east = " "
        if self.get_dir(room, 'from', direction) is "WEST":
            from_to_west = ">"
        if self.get_dir(room, 'to', direction) is "WEST":
            from_to_west = "<"
        if self.get_dir(room, 'from', direction) is "EAST":
            from_to_east = "<"
        if self.get_dir(room, 'to', direction) is "EAST":
            from_to_east = ">"

        mid = self.get_middle_char(room, direction)
        return ("%s%s%s%s%s%s%s%s" %
                (west, from_to_west, up, from_to_west, mid, from_to_east, down, from_to_east))

    def get_room_line_four(self, room, print_coords, direction):
        west = "-" if room.can_move_to("WEST") else "|"
        if print_coords:
            return "%s %s %s %s " % ((west,) + room.get_coords())
        c = " "
        if self.get_dir(room, 'from', direction) is "SOUTH":
            c = "^"
        if self.get_dir(room, 'to', direction) is "SOUTH":
            c = "v"
        return "%s   %s   " % (west, c)

    def get_directions(self, state):
        direction = {}
        while state is not None:
            parent = state.get_parent()
            if parent is None:
                break
            coords = state.get_room().get_coords()
            if coords not in direction:
                direction[coords] = {}
            direction[coords]['from'] = \
                self.get_move_dir(coords, parent.get_room().get_coords())
            direction[coords]['cost'] = state.get_cost()

            if parent.get_room().get_coords() not in direction:
                direction[parent.get_room().get_coords()] = {}
            direction[parent.get_room().get_coords()]['to'] = \
                self.get_move_dir(parent.get_room().get_coords(), coords)

            state = parent
        return direction

    def get_floor_string(self, idz, print_coords, direction={}):
        lines = [""] * (4 * self.height + 1)
        y_line = 0
        for idy in range(self.height):
            y_line = idy * 4
            for idx in range(self.width):
                room = self.rooms[idx][idy][idz]
                lines[y_line] += self.get_room_line_one(room, print_coords, direction)
                lines[y_line + 1] += self.get_room_line_two(room, print_coords, direction)
                lines[y_line + 2] += self.get_room_line_three(room, print_coords, direction)
                lines[y_line + 3] += self.get_room_line_four(room, print_coords, direction)

            for i in range(4):
                lines[y_line + i] += "|"
        lines[y_line + 4] += "|-------" * self.width + "|"
        return lines

    def print_maze(self, print_coords=False):
        """
        Prints the maze to std out. If print_coords is True, then it also prints the coordinates in each cell
        :param print_coords: Boolean (True, False) to print coordinates or not.
        """
        self.print_maze_with_path(None, print_coords=print_coords)

    def print_maze_with_path(self, state, print_coords=False):
        d = self.get_directions(state)
        print("Width: %d \nHeight: %d \nFloors: %d" %
              (self.width, self.height, self.floors))

        # loop descending through all floors
        for f in range(self.floors - 1, -1, -1):
            print("\nFloor #" + str(f))
            for line in self.get_floor_string(f, print_coords, direction=d):
                print(line)
room.py:

#!/usr/bin/env python3


class Room:
	"""Class to save all the characteristics of a room"""
	def __init__(self, coords, maze):
		# order: UP, DOWN, NORTH, SOUTH, EAST, WEST
		self.connections = []
		self.heuristicValue = 0
		self.costs = dict()
		self.coords = coords
		self.__goal = False
		self.__start = False
		self.maze = maze

	def can_move_to(self, d):
		"""
		:param d: The desired direction
		:return: True if the move is possible, False otherwise
		"""
		return d in self.connections

	def get_connections(self):
		"""
		:return: All possible moves from this room
		"""
		return self.connections

	def is_goal(self):
		"""
		:return: True if room is the goal room, False otherwise
		"""
		return self.__goal

	def set_goal(self):
		"""
		Sets the room as goal room
		"""
		self.__goal = True

	def is_start(self):
		"""
		:return: True if room is the start room, False otherwise
		"""
		return self.__start

	def set_start(self):
		"""
		Sets the room as start room
		"""
		self.__start = True

	def get_coords(self):
		"""
		:return: The coordinates of the room (x, y, z)
		"""
		return self.coords

	def get_heuristic_value(self):
		"""
		:return: The heuristic value of the room
		"""
		return self.heuristicValue

	def make_move(self, direction, cost):
		"""
		:param direction: The direction of the move
		:param cost: The cost it took to come to this room
		:return: The new room and cost if move is possible, None otherwise
		"""
		x, y, z = self.coords
		# if move is not valid, return None
		if not self.can_move_to(direction):
			return None
		cost += self.costs[direction]
		if direction is "UP":
			z += 1
		if direction is "DOWN":
			z -= 1
		if direction is "EAST":
			x += 1
		if direction is "WEST":
			x -= 1
		if direction is "NORTH":
			y -= 1
		if direction is "SOUTH":
			y += 1
		return self.maze.rooms[x][y][z], cost


state.py:
#!/usr/bin/env python3
import maze


class State:
	"""Class to save the possible states in"""
	def __init__(self, room, parent, cost=0, priority=0):
		self.parent = parent
		self.room = room
		self.cost = cost
		self.priority = priority

	def get_room(self):
		"""
		:return: The room of which this state is in
		"""
		return self.room

	# returns the previous state
	def get_parent(self):
		"""
		:return: The parent/previous state
		"""
		return self.parent

	def get_cost(self):
		"""
		:return: The cost to get to this state
		"""
		return self.cost

	def set_cost(self, cost):
		"""
		Set the cost of this state
		:param cost: The cost of this state
		"""
		self.cost = cost

	def print_actions(self, first_call=True):
		"""
		Prints the sequence af action from start state to this state
		"""
		if first_call:  # if it is the first call to this function, print begin statement
			print("Sequence of actions: ", end="")

		if self.parent is None:  # no parent, so we are at the start node: return
			return
		else:
			self.parent.print_actions(False)
			direction = maze.Maze().get_move_dir(self.parent.room.coords, self.room.coords)
			print(direction[0], end="")

		if first_call:  # if it is the first call to this function, print newline
			print()

	def print_path_helper(self):
		"""
		Helper function to print the path from start state to this state
		"""
		if self.parent is not None:
			# if it has parent state, then first print path to that state
			self.parent.print_path_helper()
			# print previous room and this room and cost till this room
			string = str(self.parent.room.coords) + " -> "
			string += str(self.room.coords)
			string += " cost: " + str(self.cost)
			print(string)

	def print_path(self):
		"""
		Prints the path from start state to this state
		"""
		self.print_path_helper()
		print()

	def __lt__(self, other):
		"""
		Function used to compare two states for the priority queue
		:param other: State to compare this state with
		:return: True is this states priority is lower than the priority of other state. Otherwise False
		"""
		return self.priority < other.priority
